type Organization @model {
  id: ID!
  country: String!
  region: String!
  city: String!
  type: String!
  name: String!
  description: String
  phone: String
  address: String
  createdBy: String!
  updatedBy: String
  Laboratories: [Laboratory] @connection(keyName: "byOrganization", fields: ["id"])
}

type Role @model {
  id: ID!
  name: String!
  description: String
  createdBy: String!
  updatedBy: String
  UserLabPracticeSessions: [UserLabPracticeSession] @connection(keyName: "byRole", fields: ["id"])
  Privileges: [PrivilegeRole] @connection(keyName: "byRole", fields: ["id"])
  Users: [RoleUser] @connection(keyName: "byRole", fields: ["id"])
}

type Privilege @model {
  id: ID!
  name: String!
  description: String
  Roles: [PrivilegeRole] @connection(keyName: "byPrivilege", fields: ["id"])
}

type UserLabPracticeSession @model @key(name: "byUser", fields: ["userID"]) @key(name: "byLabPracticeSession", fields: ["labpracticesessionID"]) @key(name: "byRole", fields: ["roleID"]) {
  id: ID!
  sessionStartDate: AWSDateTime
  sessionEndDate: AWSDateTime
  User: User @connection
  LabPracticeSession: LabPracticeSession @connection
  userID: ID!
  labpracticesessionID: ID!
  roleID: ID
}

type User @model {
  id: ID!
  name: String!
  lastNames: String!
  documentIdNumber: String
  email: String!
  phone: String
  userName: String
  s3AvatarPath: String
  dateOfBirth: String
  updatedBy: String
  createdBy: String!
  UserLabPracticeSessions: [UserLabPracticeSession] @connection(keyName: "byUser", fields: ["id"])
  Roles: [RoleUser] @connection(keyName: "byUser", fields: ["id"])
  UserLabSemesters: [UserLabSemester] @connection(keyName: "byUser", fields: ["id"])
}

type LabPracticeSessionCommand @model @key(name: "byLabPracticeSession", fields: ["labpracticesessionID"]) @key(name: "byLabPracticeCommand", fields: ["labpracticecommandID"]) {
  id: ID!
  requestDate: AWSDateTime!
  executionDate: AWSDateTime
  status: String!
  parameters: AWSJSON
  LabPracticeSession: LabPracticeSession @connection
  labpracticesessionID: ID!
  LabPracticeCommand: LabPracticeCommand @connection
  labpracticecommandID: ID!
}

type LabPracticeOutput @model @key(name: "byLabPractice", fields: ["labpracticeID"]) {
  id: ID!
  name: String!
  labelName: String
  order: Int
  description: String
  units: AWSJSON
  updatedBy: String
  createdBy: String!
  labpracticeID: ID!
  outputType: String!
}

type LabPracticeSession @model @key(name: "byLabPractice", fields: ["labpracticeID"]) {
  id: ID!
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  description: String
  updatedBy: String
  createdBy: String!
  LabPractice: LabPracticeOutput @connection
  labpracticeID: ID!
  LabPracticeSessionCommands: [LabPracticeSessionCommand] @connection(keyName: "byLabPracticeSession", fields: ["id"])
  UserLabPracticeSessions: [UserLabPracticeSession] @connection(keyName: "byLabPracticeSession", fields: ["id"])
}

type LabPracticeDevice @model {
  id: ID!
  name: String!
  description: String
  type: String
  updatedBy: String
  createdBy: String
  LabPractice: LabPracticeOutput @connection
}

type LabPracticeParameter @model @key(name: "byLabPracticeCommand", fields: ["labpracticecommandID"]) @key(name: "byLabPractice", fields: ["labpracticeID"]) {
  id: ID!
  name: String!
  labelName: String
  order: Int
  description: String
  defaultValue: String!
  minValue: Int
  maxValue: Int
  regex: String
  updatedBy: String
  createdBy: String
  LabPracticeCommand: LabPracticeCommand @connection
  labpracticecommandID: ID
  LabPractice: LabPracticeDevice @connection
  labpracticeID: ID
}

type LabPracticeCommand @model @key(name: "byLabPractice", fields: ["labpracticeID"]) {
  id: ID!
  name: String!
  labelName: String
  order: Int
  description: String
  updatedBy: String
  createdBy: String!
  LabPractice: LabPracticeParameter @connection
  labpracticeID: ID!
  LabPracticeParameters: [LabPracticeParameter] @connection(keyName: "byLabPracticeCommand", fields: ["id"])
  LabPracticeSessionCommands: [LabPracticeSessionCommand] @connection(keyName: "byLabPracticeCommand", fields: ["id"])
}

type LabPractice @model @key(name: "byLaboratory", fields: ["laboratoryID"]) {
  id: ID!
  name: String!
  description: String
  duration: Int!
  updatedBy: String
  createdBy: String!
  Laboratory: Laboratory @connection
  laboratoryID: ID!
  LabPracticeCommands: [LabPracticeCommand] @connection(keyName: "byLabPractice", fields: ["id"])
  LabPracticeParameters: [LabPracticeParameter] @connection(keyName: "byLabPractice", fields: ["id"])
  LabPracticeDevice: LabPracticeDevice @connection
  LabPracticeSessions: [LabPracticeSession] @connection(keyName: "byLabPractice", fields: ["id"])
  LabPracticeOutputs: [LabPracticeOutput] @connection(keyName: "byLabPractice", fields: ["id"])
}

type LabSemester @model @key(name: "byLaboratory", fields: ["laboratoryID"]) {
  id: ID!
  semesterName: String!
  description: String
  emailUserList: AWSJSON
  updatedBy: String
  createdBy: String!
  Laboratory: Laboratory @connection
  laboratoryID: ID!
  users: [UserLabSemester] @connection(keyName: "byLabSemester", fields: ["id"])
}

type Laboratory @model @key(name: "byOrganization", fields: ["organizationID"]) {
  id: ID!
  name: String!
  description: String
  updatedBy: String
  createdBy: String!
  LabSemesters: [LabSemester] @connection(keyName: "byLaboratory", fields: ["id"])
  organizationID: ID!
  Organization: Organization @connection
}

type PrivilegeRole @model(queries: null) @key(name: "byPrivilege", fields: ["privilegeID", "roleID"]) @key(name: "byRole", fields: ["roleID", "privilegeID"]) {
  id: ID!
  privilegeID: ID!
  roleID: ID!
  privilege: Privilege! @connection(fields: ["privilegeID"])
  role: Role! @connection(fields: ["roleID"])
}

type RoleUser @model(queries: null) @key(name: "byUser", fields: ["userID", "roleID"]) @key(name: "byRole", fields: ["roleID", "userID"]) {
  id: ID!
  userID: ID!
  roleID: ID!
  user: User! @connection(fields: ["userID"])
  role: Role! @connection(fields: ["roleID"])
}

type UserLabSemester @model(queries: null) @key(name: "byUser", fields: ["userID", "labsemesterID"]) @key(name: "byLabSemester", fields: ["labsemesterID", "userID"]) {
  id: ID!
  userID: ID!
  labsemesterID: ID!
  user: User! @connection(fields: ["userID"])
  labsemester: LabSemester! @connection(fields: ["labsemesterID"])
}

input LabOutputIn{
  id: ID!
  captureDate: AWSDateTime
  value: String
  labpracticeoutputID: ID!
  labpracticesessionID: ID!
}

type LabOutputOut{
  id: ID!
  captureDate: AWSDateTime
  value: String
  labpracticeoutputID: ID!
  labpracticesessionID: ID!
}

input LambdaInput {
  message: String!
  topic: String!
}

type Mutation {
  publishMqttMessage(input: LambdaInput!): String @function(name: "iotpub-${env}")
  labOutputListen(input: LabOutputIn!): LabOutputOut @function(name: "laboutputlogger-${env}")
}

type Subscription {
  onLabOutputListenBySessionID(labpracticesessionID: ID!): LabOutputOut @aws_subscribe(mutations: ["labOutputListen"])
  onCreateLabPracticeSessionCommandBySessionID(labpracticesessionID: ID!): LabPracticeSessionCommand @aws_subscribe(mutations: ["createLabPracticeSessionCommand"])
}
 