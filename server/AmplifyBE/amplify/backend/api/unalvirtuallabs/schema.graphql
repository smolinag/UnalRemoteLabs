type Organization @model @auth(rules: [{ allow: public },  { allow: private}]) {
  id: ID!
  country: String!
  region: String!
  city: String!
  type: String!
  name: String!
  description: String
  phone: String
  address: String
  Laboratories: [Laboratory] @connection(keyName: "byOrganization", fields: ["id"])
  Users: [User] @connection(keyName: "byOrganization", fields: ["id"])
  updatedBy: String
  createdBy: String!
}

type UserLabPracticeSession @model @key(name: "byUser", fields: ["userID"]) @key(name: "byLabPracticeSession", fields: ["labpracticesessionID"]) @auth(rules: [{ allow: public },  { allow: private}]) {
  id: ID!
  sessionStartDate: AWSDateTime
  sessionEndDate: AWSDateTime
  User: User @connection(fields: ["userID"])
  userID: ID!
  LabPracticeSession: LabPracticeSession @connection(fields: ["labpracticesessionID"])
  labpracticesessionID: ID!
}

type User @model @key(name: "byEmail", fields: ["email"])  @key(name: "byOrganization", fields: ["organizationID"]) @auth(rules: [{ allow: public },  { allow: private}]) {
  id: ID!
  name: String!
  identificationNumber: String
  email: String!
  phone: String
  userName: String
  s3AvatarPath: String
  role: Role!
  organizationID: ID!
  Organization: Organization @connection(fields: ["organizationID"])
  UserLabPracticeSessions: [UserLabPracticeSession] @connection(keyName: "byUser", fields: ["id"])
  UserLabSemesters: [UserLabSemester] @connection(keyName: "byUser", fields: ["id"])
  updatedBy: String
  createdBy: String!
}

type LabPracticeSessionCommand @model @key(name: "byLabPracticeSession", fields: ["labpracticesessionID"]) @key(name: "byLabPracticeCommand", fields: ["labpracticecommandID"]) @auth(rules: [{ allow: public },  { allow: private}]) {
  id: ID!
  requestDate: AWSDateTime!
  executionDate: AWSDateTime
  status: Status!
  parameters: AWSJSON
  LabPracticeSession: LabPracticeSession @connection(fields: ["labpracticesessionID"])
  labpracticesessionID: ID!
  LabPracticeCommand: LabPracticeCommand @connection(fields: ["labpracticecommandID"])
  labpracticecommandID: ID!
}

type LabPracticeOutput @model @key(name: "byLabPractice", fields: ["labpracticeID"]) @auth(rules: [{ allow: public },  { allow: private}]) {
  id: ID!
  name: String!
  labelName: String
  order: Int
  description: String
  units: String
  LabPractice: LabPractice @connection(fields: ["labpracticeID"])
  labpracticeID: ID!
  outputType: String!
  updatedBy: String
  createdBy: String!
}

type LabPracticeSession @model @key(name: "byLabPractice", fields: ["labpracticeID"]) @key(name: "byLabSemester", fields: ["labSemesterID"]) @auth(rules: [{ allow: public },  { allow: private}]) {
  id: ID!
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  description: String
  LabPractice: LabPractice @connection(fields: ["labpracticeID"])
  labpracticeID: ID
  LabSemester: LabSemester @connection(fields: ["labSemesterID"])
  labSemesterID: ID
  LabPracticeSessionCommands: [LabPracticeSessionCommand] @connection(keyName: "byLabPracticeSession", fields: ["id"])
  UserLabPracticeSessions: [UserLabPracticeSession] @connection(keyName: "byLabPracticeSession", fields: ["id"])
  videoUrlCode: String
  updatedBy: String
  createdBy: String!
}

type LabPracticeParameter @model @key(name: "byLabPracticeCommand", fields: ["labpracticecommandID"]) @key(name: "byLabPractice", fields: ["labpracticeID"]) @auth(rules: [{ allow: public },  { allow: private}]) {
  id: ID!
  name: String!
  labelName: String
  order: Int
  description: String
  defaultValue: String!
  minValue: Int
  maxValue: Int
  regex: String
  LabPracticeCommand: LabPracticeCommand @connection(fields: ["labpracticecommandID"])
  labpracticecommandID: ID
  LabPractice: LabPractice @connection(fields: ["labpracticeID"])
  labpracticeID: ID
  updatedBy: String
  createdBy: String
}

type LabPracticeCommand @model @key(name: "byLabPractice", fields: ["labpracticeID"]) @auth(rules: [{ allow: public },  { allow: private}]) {
  id: ID!
  name: String!
  labelName: String
  order: Int
  description: String
  LabPractice: LabPractice @connection(fields: ["labpracticeID"])
  labpracticeID: ID!
  LabPracticeParameters: [LabPracticeParameter] @connection(keyName: "byLabPracticeCommand", fields: ["id"])
  LabPracticeSessionCommands: [LabPracticeSessionCommand] @connection(keyName: "byLabPracticeCommand", fields: ["id"])
  updatedBy: String
  createdBy: String!  
}

type LabPractice @model @key(name: "byLaboratory", fields: ["laboratoryID"]) @auth(rules: [{ allow: public },  { allow: private}]) {
  id: ID!
  name: String!
  description: String
  duration: Int!
  Laboratory: Laboratory @connection(fields: ["laboratoryID"])
  laboratoryID: ID!
  LabPracticeCommands: [LabPracticeCommand] @connection(keyName: "byLabPractice", fields: ["id"])
  LabPracticeParameters: [LabPracticeParameter] @connection(keyName: "byLabPractice", fields: ["id"])
  LabPracticeDeviceId: String!
  LabPracticeSessions: [LabPracticeSession] @connection(keyName: "byLabPractice", fields: ["id"])
  LabPracticeOutputs: [LabPracticeOutput] @connection(keyName: "byLabPractice", fields: ["id"])
  guideS3Path: String
  updatedBy: String
  createdBy: String!
}

type LabSemester @model @key(name: "byLaboratory", fields: ["laboratoryID"]) @auth(rules: [{ allow: public },  { allow: private}]) {
  id: ID!
  semesterName: String!
  description: String
  professor: String!
  monitorEmailList: AWSJSON
  studentEmailList: AWSJSON!
  Laboratory: Laboratory @connection(fields: ["laboratoryID"])
  laboratoryID: ID!
  users: [UserLabSemester] @connection(keyName: "byLabSemester", fields: ["id"])
  LabPracticeSessions: [LabPracticeSession] @connection(keyName: "byLabPractice", fields: ["id"])
  updatedBy: String
  createdBy: String!
}

type Laboratory @model @key(name: "byOrganization", fields: ["organizationID"]) @auth(rules: [{ allow: public },  { allow: private}]) {
  id: ID!
  name: String!
  description: String
  organizationID: ID!
  Organization: Organization @connection(fields: ["organizationID"])
  LabSemesters: [LabSemester] @connection(keyName: "byLaboratory", fields: ["id"])
  LabPractices: [LabPractice] @connection(keyName: "byLaboratory", fields: ["id"])
  updatedBy: String
  createdBy: String!
}

type UserLabSemester @model @key(name: "byUser", fields: ["userID", "labsemesterID"]) @key(name: "byLabSemester", fields: ["labsemesterID", "userID"]) @auth(rules: [{ allow: public },  { allow: private}]) {
  id: ID!
  userID: ID!
  labsemesterID: ID!
  user: User! @connection(fields: ["userID"])
  labsemester: LabSemester! @connection(fields: ["labsemesterID"])
}

type LabOutputOut @aws_api_key @aws_cognito_user_pools {  
  labPracticeOutputID: ID! 
  value: String!
  rpiID: ID!
  captureDate: AWSDateTime!
}

input LabOutputIn{
  labPracticeOutputID: ID!
  value: String!
  rpiID: ID!
  captureDate: AWSDateTime!
}

input LambdaInput {
  message: String!
  topic: String!
}

input EmailInput{
  topic: String!
  message: String!
  emailList: String!
}

enum Role {
    Admins
    Monitors
    Students
    Professors
}

enum Status {
    pending
    success
    failure
    busy
}

type Mutation {
  publishMqttMessage(input: LambdaInput!): String @function(name: "iotpub-${env}") @auth(rules: [{ allow: public },  { allow: private}])
  labOutputListen(input: LabOutputIn!): LabOutputOut @function(name: "laboutputlogger-${env}") @auth(rules: [{ allow: public },  { allow: private}])
  sendEmail(input: EmailInput!): String @function(name: "emaildelivery-${env}") @auth(rules: [{ allow: public },  { allow: private}])
}

type Subscription {
  onLabOutputListen(rpiID: ID! ): LabOutputOut @aws_subscribe(mutations: ["labOutputListen"]) @auth(rules: [{ allow: public },  { allow: private}])
  onUpdateLabPracticeSessionCommandBySessionID(labpracticesessionID: ID!): LabPracticeSessionCommand @aws_subscribe(mutations: ["updateLabPracticeSessionCommand"]) @auth(rules: [{ allow: public },  { allow: private}])
}